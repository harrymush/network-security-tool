from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel,
                            QLineEdit, QPushButton, QTableWidget,
                            QTableWidgetItem, QHeaderView, QFrame, QTextEdit,
                            QMessageBox, QComboBox, QProgressBar, QGroupBox,
                            QRadioButton, QButtonGroup, QScrollArea)
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QTimer
from network_security_tool.scanner.vulnerability_scanner import VulnerabilityScanner
import sys
import time

# Predefined port ranges
PORT_RANGES = {
    "Well-known ports (0-1023)": "0-1023",
    "Registered ports (1024-49151)": "1024-49151",
    "Dynamic ports (49152-65535)": "49152-65535",
    "All ports (0-65535)": "0-65535",
    "Common services": "21,22,23,25,53,80,110,143,443,445,3389,8080",
    "Web servers": "80,443,8080,8443",
    "Database servers": "1433,1521,3306,5432,27017",
    "Mail servers": "25,110,143,465,587,993,995",
    "Custom range": "custom"
}

class ScannerThread(QThread):
    scan_complete = pyqtSignal(dict)
    progress_updated = pyqtSignal(int, str)
    error_occurred = pyqtSignal(str)
    status_updated = pyqtSignal(str)
    
    def __init__(self, scanner, target, ports):
        super().__init__()
        self.scanner = scanner
        self.target = target
        self.ports = ports
        self._is_running = True
        
    def run(self):
        try:
            if not self._is_running:
                return
                
            # Update progress for port scanning
            self.progress_updated.emit(20, "Scanning ports...")
            self.status_updated.emit(f"Starting scan on {self.target} for ports {self.ports}")
            
            results = self.scanner.scan_host(self.target, self.ports)
            
            if not self._is_running:
                return
                
            # Update progress for vulnerability checks
            self.progress_updated.emit(60, "Checking vulnerabilities...")
            self.status_updated.emit("Analyzing open ports and services...")
            
            # Emit final results
            self.progress_updated.emit(100, "Scan complete")
            self.status_updated.emit("Scan completed successfully")
            self.scan_complete.emit(results)
            
        except Exception as e:
            error_msg = f"Scan failed: {str(e)}"
            print(f"Error during scan: {error_msg}")  # Debug log
            self.error_occurred.emit(error_msg)
            self.status_updated.emit(f"Error: {error_msg}")
            self.scan_complete.emit({"error": error_msg})
            
    def stop(self):
        self._is_running = False
        self.status_updated.emit("Scan stopped by user")

class VulnerabilityScannerTab(QWidget):
    def __init__(self):
        super().__init__()
        self.scanner = VulnerabilityScanner()
        self.scanner_thread = None
        self.progress_timer = QTimer()
        self.progress_timer.timeout.connect(self.update_progress_animation)
        self.progress_direction = 1
        self.progress_value = 0
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout()
        
        # Target input section
        target_frame = QFrame()
        target_frame.setFrameStyle(QFrame.Shape.StyledPanel | QFrame.Shadow.Raised)
        target_layout = QVBoxLayout(target_frame)
        
        # Target input
        target_input_layout = QHBoxLayout()
        target_label = QLabel("Target:")
        self.target_input = QLineEdit()
        self.target_input.setPlaceholderText("e.g., example.com or 192.168.1.1")
        target_input_layout.addWidget(target_label)
        target_input_layout.addWidget(self.target_input)
        target_layout.addLayout(target_input_layout)
        
        # Port selection section
        port_group = QGroupBox("Port Selection")
        port_layout = QVBoxLayout(port_group)
        
        # Port range selection
        port_range_layout = QHBoxLayout()
        port_range_label = QLabel("Port Range:")
        self.port_range_combo = QComboBox()
        self.port_range_combo.addItems(PORT_RANGES.keys())
        self.port_range_combo.currentTextChanged.connect(self.on_port_range_changed)
        port_range_layout.addWidget(port_range_label)
        port_range_layout.addWidget(self.port_range_combo)
        port_layout.addLayout(port_range_layout)
        
        # Custom port range input
        custom_port_layout = QHBoxLayout()
        custom_port_label = QLabel("Custom Range:")
        self.custom_port_input = QLineEdit()
        self.custom_port_input.setPlaceholderText("e.g., 1-1024 or 80,443,8080")
        self.custom_port_input.setEnabled(False)
        custom_port_layout.addWidget(custom_port_label)
        custom_port_layout.addWidget(self.custom_port_input)
        port_layout.addLayout(custom_port_layout)
        
        target_layout.addWidget(port_group)
        layout.addWidget(target_frame)
        
        # Control buttons
        button_layout = QHBoxLayout()
        self.start_btn = QPushButton("Start Scan")
        self.start_btn.clicked.connect(self.start_scan)
        self.stop_btn = QPushButton("Stop")
        self.stop_btn.clicked.connect(self.stop_scan)
        self.stop_btn.setEnabled(False)
        self.clear_btn = QPushButton("Clear")
        self.clear_btn.clicked.connect(self.clear_results)
        button_layout.addWidget(self.start_btn)
        button_layout.addWidget(self.stop_btn)
        button_layout.addWidget(self.clear_btn)
        layout.addLayout(button_layout)
        
        # Progress section
        progress_frame = QFrame()
        progress_frame.setFrameStyle(QFrame.Shape.StyledPanel | QFrame.Shadow.Raised)
        progress_layout = QVBoxLayout(progress_frame)
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setTextVisible(True)
        self.progress_label = QLabel("Ready")
        progress_layout.addWidget(self.progress_label)
        progress_layout.addWidget(self.progress_bar)
        
        # Status window
        status_group = QGroupBox("Scan Status")
        status_layout = QVBoxLayout(status_group)
        self.status_text = QTextEdit()
        self.status_text.setReadOnly(True)
        self.status_text.setMaximumHeight(100)
        status_layout.addWidget(self.status_text)
        progress_layout.addWidget(status_group)
        
        layout.addWidget(progress_frame)
        
        # Results tabs
        results_frame = QFrame()
        results_frame.setFrameStyle(QFrame.Shape.StyledPanel | QFrame.Shadow.Raised)
        results_layout = QVBoxLayout(results_frame)
        
        # Vulnerabilities table
        vuln_label = QLabel("Vulnerabilities:")
        self.vuln_table = QTableWidget()
        self.vuln_table.setColumnCount(4)
        self.vuln_table.setHorizontalHeaderLabels([
            "Type", "Severity", "Port", "Description"
        ])
        self.vuln_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        results_layout.addWidget(vuln_label)
        results_layout.addWidget(self.vuln_table)
        
        # Open ports table
        ports_label = QLabel("Open Ports:")
        self.ports_table = QTableWidget()
        self.ports_table.setColumnCount(4)
        self.ports_table.setHorizontalHeaderLabels([
            "Port", "Protocol", "Service", "Version"
        ])
        self.ports_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        results_layout.addWidget(ports_label)
        results_layout.addWidget(self.ports_table)
        
        # Details text area
        details_label = QLabel("Details:")
        self.details_text = QTextEdit()
        self.details_text.setReadOnly(True)
        results_layout.addWidget(details_label)
        results_layout.addWidget(self.details_text)
        
        layout.addWidget(results_frame)
        
        self.setLayout(layout)
        
    def update_progress_animation(self):
        """Update progress bar animation during scan"""
        if self.progress_value >= 100:
            self.progress_direction = -1
        elif self.progress_value <= 0:
            self.progress_direction = 1
            
        self.progress_value += self.progress_direction
        self.progress_bar.setValue(self.progress_value)
        
    def start_scan(self):
        target = self.target_input.text().strip()
        if not target:
            QMessageBox.warning(self, "Warning", "Please enter a target")
            return
            
        # Get selected port range
        selected_range = self.port_range_combo.currentText()
        if selected_range == "Custom range":
            ports = self.custom_port_input.text().strip()
            if not ports:
                QMessageBox.warning(self, "Warning", "Please enter a custom port range")
                return
        else:
            ports = PORT_RANGES[selected_range]
            
        try:
            # Clean up any existing thread
            if self.scanner_thread and self.scanner_thread.isRunning():
                self.scanner_thread.stop()
                self.scanner_thread.wait(1000)  # Wait up to 1 second
                if self.scanner_thread.isRunning():
                    self.scanner_thread.terminate()
                    
            self.start_btn.setEnabled(False)
            self.stop_btn.setEnabled(True)
            self.clear_results()
            self.progress_bar.setValue(0)
            self.progress_label.setText("Starting scan...")
            self.status_text.clear()
            self.status_text.append(f"Starting scan on {target} for ports {ports}")
            
            # Start progress animation
            self.progress_timer.start(50)  # Update every 50ms
            
            self.scanner_thread = ScannerThread(
                self.scanner,
                target,
                ports
            )
            
            self.scanner_thread.scan_complete.connect(self.handle_results)
            self.scanner_thread.progress_updated.connect(self.update_progress)
            self.scanner_thread.error_occurred.connect(self.handle_error)
            self.scanner_thread.status_updated.connect(self.update_status)
            self.scanner_thread.start()
            
        except Exception as e:
            self.handle_error(str(e))
            
    def stop_scan(self):
        """Stop the current scan"""
        if self.scanner_thread and self.scanner_thread.isRunning():
            try:
                # Stop the progress animation
                self.progress_timer.stop()
                
                # Signal the thread to stop
                self.scanner_thread.stop()
                
                # Update UI immediately
                self.start_btn.setEnabled(True)
                self.stop_btn.setEnabled(False)
                self.progress_label.setText("Stopping scan...")
                self.status_text.append("Stopping scan...")
                
                # Use a timer to check if the thread has stopped
                check_timer = QTimer()
                check_timer.timeout.connect(lambda: self.check_thread_status(check_timer))
                check_timer.start(100)  # Check every 100ms
                
            except Exception as e:
                print(f"Error stopping scan: {e}")
                self.handle_error(f"Error stopping scan: {e}")
                
    def check_thread_status(self, timer):
        """Check if the scanner thread has stopped"""
        if not self.scanner_thread.isRunning():
            timer.stop()
            self.progress_label.setText("Scan stopped")
            self.progress_bar.setValue(0)
            self.status_text.append("Scan stopped by user")
            
    def update_status(self, message):
        """Update the status window with a new message"""
        self.status_text.append(message)
        # Scroll to the bottom
        self.status_text.verticalScrollBar().setValue(
            self.status_text.verticalScrollBar().maximum()
        )
        
    def update_progress(self, value, message):
        """Update progress bar and label"""
        self.progress_label.setText(message)
        if value == 100:
            self.progress_timer.stop()
            self.progress_bar.setValue(100)
        elif value == 0:
            self.progress_timer.start(50)
        
    def on_port_range_changed(self, text):
        """Handle port range selection change"""
        if text == "Custom range":
            self.custom_port_input.setEnabled(True)
            self.custom_port_input.setFocus()
        else:
            self.custom_port_input.setEnabled(False)
            self.custom_port_input.clear()
            
    def clear_results(self):
        self.vuln_table.setRowCount(0)
        self.ports_table.setRowCount(0)
        self.details_text.clear()
        
    def handle_results(self, results):
        """Handle and display scan results"""
        try:
            # Clear previous results
            self.vuln_table.setRowCount(0)
            self.ports_table.setRowCount(0)
            self.details_text.clear()
            
            if "error" in results:
                if results["error"] == "No open ports found. The host might be blocking the scan or have no open ports.":
                    self.details_text.setText(
                        f"Scan completed but no open ports found.\n\n"
                        f"Target: {results['target']}\n"
                        f"Timestamp: {results['timestamp']}\n\n"
                        "Possible reasons:\n"
                        "1. The host might be blocking the scan\n"
                        "2. The host might have no open ports\n"
                        "3. The host might be using a firewall\n"
                        "4. The host might be down or unreachable"
                    )
                else:
                    self.handle_error(results["error"])
                return
                
            # Update vulnerabilities table
            for vuln in results["vulnerabilities"]:
                row = self.vuln_table.rowCount()
                self.vuln_table.insertRow(row)
                self.vuln_table.setItem(row, 0, QTableWidgetItem(vuln["type"]))
                self.vuln_table.setItem(row, 1, QTableWidgetItem(vuln["severity"]))
                self.vuln_table.setItem(row, 2, QTableWidgetItem(str(vuln["port"])))
                self.vuln_table.setItem(row, 3, QTableWidgetItem(vuln["description"]))
                
            # Update ports table
            if not results["open_ports"]:
                self.details_text.setText(
                    f"Scan completed but no open ports found.\n\n"
                    f"Target: {results['target']}\n"
                    f"Timestamp: {results['timestamp']}\n\n"
                    "Possible reasons:\n"
                    "1. The host might be blocking the scan\n"
                    "2. The host might have no open ports\n"
                    "3. The host might be using a firewall\n"
                    "4. The host might be down or unreachable"
                )
            else:
                for port in results["open_ports"]:
                    row = self.ports_table.rowCount()
                    self.ports_table.insertRow(row)
                    self.ports_table.setItem(row, 0, QTableWidgetItem(str(port["port"])))
                    self.ports_table.setItem(row, 1, QTableWidgetItem(port["protocol"]))
                    self.ports_table.setItem(row, 2, QTableWidgetItem(port["service"]))
                    self.ports_table.setItem(row, 3, QTableWidgetItem(port["version"]))
                    
                # Update details
                details = []
                details.append(f"Scan Target: {results['target']}")
                details.append(f"Timestamp: {results['timestamp']}")
                details.append(f"\nOpen Ports: {len(results['open_ports'])}")
                
                if results["ssl_info"]:
                    details.append("\nSSL/TLS Information:")
                    for key, value in results["ssl_info"].items():
                        details.append(f"{key}: {value}")
                        
                if results["http_headers"]:
                    details.append("\nHTTP Headers:")
                    for key, value in results["http_headers"].items():
                        details.append(f"{key}: {value}")
                        
                self.details_text.setText("\n".join(details))
            
            self.start_btn.setEnabled(True)
            self.stop_btn.setEnabled(False)
            self.progress_label.setText("Scan complete")
            self.progress_bar.setValue(100)
            
        except Exception as e:
            self.handle_error(str(e))
            
    def handle_error(self, error_message):
        """Handle and display error messages"""
        print(f"Error in scanner: {error_message}")  # Debug log
        QMessageBox.critical(
            self,
            "Scan Error",
            f"An error occurred during the scan:\n\n{error_message}\n\n"
            "Please check:\n"
            "1. The target is reachable\n"
            "2. You have proper permissions to run nmap\n"
            "3. The port range is valid"
        )
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.progress_label.setText("Error occurred")
        self.progress_bar.setValue(0) 