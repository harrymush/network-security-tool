from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit,
    QPushButton, QProgressBar, QTableWidget, QTableWidgetItem,
    QHeaderView, QComboBox, QTextEdit, QGroupBox, QFormLayout,
    QSpinBox, QMessageBox
)
from PyQt6.QtCore import Qt, QThread, pyqtSignal
from PyQt6.QtGui import QColor
import requests
import threading
import queue
import time
import re
import logging

class VulnerabilityScannerThread(QThread):
    """Thread for running vulnerability scans in the background."""
    progress = pyqtSignal(dict)
    finished = pyqtSignal(list)
    error = pyqtSignal(str)

    def __init__(self, target_url: str, max_threads: int):
        super().__init__()
        self.target_url = target_url
        self.max_threads = max_threads
        self._is_running = True
        self._queue = queue.Queue()
        self._threads = []

    def run(self):
        try:
            # Initialize scan
            self._queue.put(("Initializing scan...", "info"))
            
            # Check for common vulnerabilities
            self.check_common_vulnerabilities()
            
            # Wait for all threads to complete
            for thread in self._threads:
                thread.join()
                
            self.finished.emit([])
            
        except Exception as e:
            self.error.emit(str(e))

    def check_common_vulnerabilities(self):
        """Check for common web vulnerabilities."""
        try:
            # Check for HTTP headers
            self.check_headers()
            
            # Check for common misconfigurations
            self.check_misconfigurations()
            
            # Check for sensitive files
            self.check_sensitive_files()
            
            # Check for outdated software
            self.check_outdated_software()
            
        except Exception as e:
            self.error.emit(f"Error during vulnerability check: {str(e)}")

    def check_headers(self):
        """Check for security-related HTTP headers."""
        try:
            response = requests.get(self.target_url, verify=False, timeout=10)
            headers = response.headers
            
            # Check for missing security headers
            security_headers = {
                'X-Frame-Options': 'Prevents clickjacking attacks',
                'X-XSS-Protection': 'Protects against XSS attacks',
                'X-Content-Type-Options': 'Prevents MIME type sniffing',
                'Strict-Transport-Security': 'Enforces HTTPS',
                'Content-Security-Policy': 'Controls resource loading'
            }
            
            for header, description in security_headers.items():
                if header not in headers:
                    self.progress.emit({
                        'type': 'Missing Security Header',
                        'severity': 'Medium',
                        'description': f'Missing {header} header',
                        'details': description
                    })
                    
        except Exception as e:
            self.error.emit(f"Error checking headers: {str(e)}")

    def check_misconfigurations(self):
        """Check for common misconfigurations."""
        try:
            # Check for directory listing
            response = requests.get(self.target_url + '/', verify=False, timeout=10)
            if 'Index of /' in response.text:
                self.progress.emit({
                    'type': 'Directory Listing',
                    'severity': 'Medium',
                    'description': 'Directory listing enabled',
                    'details': 'Directory listing exposes file structure'
                })
                
            # Check for default files
            default_files = ['/phpinfo.php', '/test.php', '/info.php']
            for file in default_files:
                response = requests.get(self.target_url + file, verify=False, timeout=10)
                if response.status_code == 200:
                    self.progress.emit({
                        'type': 'Default File',
                        'severity': 'Low',
                        'description': f'Default file found: {file}',
                        'details': 'Default files should be removed'
                    })
                    
        except Exception as e:
            self.error.emit(f"Error checking misconfigurations: {str(e)}")

    def check_sensitive_files(self):
        """Check for sensitive files."""
        try:
            sensitive_files = [
                '/.git/config',
                '/.env',
                '/config.php',
                '/wp-config.php',
                '/.htaccess'
            ]
            
            for file in sensitive_files:
                response = requests.get(self.target_url + file, verify=False, timeout=10)
                if response.status_code == 200:
                    self.progress.emit({
                        'type': 'Sensitive File',
                        'severity': 'High',
                        'description': f'Sensitive file found: {file}',
                        'details': 'Sensitive files should not be publicly accessible'
                    })
                    
        except Exception as e:
            self.error.emit(f"Error checking sensitive files: {str(e)}")

    def check_outdated_software(self):
        """Check for outdated software versions."""
        try:
            response = requests.get(self.target_url, verify=False, timeout=10)
            
            # Check for common software signatures
            software_checks = {
                'WordPress': ('wp-content', 'WordPress version may be outdated'),
                'Drupal': ('Drupal', 'Drupal version may be outdated'),
                'Joomla': ('Joomla', 'Joomla version may be outdated')
            }
            
            for software, (signature, details) in software_checks.items():
                if signature in response.text:
                    self.progress.emit({
                        'type': 'Outdated Software',
                        'severity': 'High',
                        'description': f'Possible {software} installation',
                        'details': details
                    })
                    
        except Exception as e:
            self.error.emit(f"Error checking software versions: {str(e)}")

    def stop(self):
        self._is_running = False

class VulnerabilityScannerTab(QWidget):
    """GUI tab for the vulnerability scanner."""
    def __init__(self):
        super().__init__()
        self.scanner_thread = None
        self.init_ui()

    def init_ui(self):
        """Initialize the user interface."""
        layout = QVBoxLayout()
        self.setLayout(layout)

        # Target URL input
        url_group = QGroupBox("Target URL")
        url_layout = QFormLayout()
        self.url_input = QLineEdit()
        self.url_input.setPlaceholderText("https://example.com")
        self.url_input.setMinimumHeight(30)
        self.url_input.setMinimumWidth(400)
        self.url_input.setStyleSheet("""
            QLineEdit {
                padding: 4px;
                font-size: 13px;
            }
        """)
        url_layout.addRow("URL:", self.url_input)
        url_group.setLayout(url_layout)
        layout.addWidget(url_group)

        # Scan options
        options_group = QGroupBox("Scan Options")
        options_layout = QFormLayout()
        
        self.max_threads_input = QSpinBox()
        self.max_threads_input.setRange(1, 50)
        self.max_threads_input.setValue(10)
        options_layout.addRow("Max Threads:", self.max_threads_input)
        
        options_group.setLayout(options_layout)
        layout.addWidget(options_group)

        # Control buttons
        button_layout = QHBoxLayout()
        self.start_button = QPushButton("Start Scan")
        self.start_button.clicked.connect(self.start_scan)
        self.stop_button = QPushButton("Stop Scan")
        self.stop_button.clicked.connect(self.stop_scan)
        self.stop_button.setEnabled(False)
        self.clear_button = QPushButton("Clear Results")
        self.clear_button.clicked.connect(self.clear_results)
        
        button_layout.addWidget(self.start_button)
        button_layout.addWidget(self.stop_button)
        button_layout.addWidget(self.clear_button)
        layout.addLayout(button_layout)

        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        layout.addWidget(self.progress_bar)

        # Results table
        self.results_table = QTableWidget()
        self.results_table.setColumnCount(4)
        self.results_table.setHorizontalHeaderLabels(["Type", "Severity", "Description", "Details"])
        self.results_table.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)
        layout.addWidget(self.results_table)

        # Status messages
        self.status_text = QTextEdit()
        self.status_text.setReadOnly(True)
        self.status_text.setMaximumHeight(100)
        layout.addWidget(self.status_text)

    def validate_url(self, url: str) -> bool:
        """Validate the target URL format."""
        pattern = r'^https?://[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(?:/[^\s]*)?$'
        return bool(re.match(pattern, url))

    def start_scan(self):
        """Start the vulnerability scan."""
        url = self.url_input.text().strip()
        if not url:
            QMessageBox.warning(self, "Error", "Please enter a target URL")
            return

        if not self.validate_url(url):
            QMessageBox.warning(self, "Error", "Invalid URL format. Please enter a valid URL starting with http:// or https://")
            return

        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        self.clear_button.setEnabled(False)
        self.progress_bar.setValue(0)
        self.status_text.clear()
        self.results_table.setRowCount(0)

        self.scanner_thread = VulnerabilityScannerThread(
            url,
            self.max_threads_input.value()
        )
        self.scanner_thread.progress.connect(self.update_progress)
        self.scanner_thread.finished.connect(self.scan_finished)
        self.scanner_thread.error.connect(self.scan_error)
        self.scanner_thread.start()

    def stop_scan(self):
        """Stop the current scan."""
        if self.scanner_thread:
            self.scanner_thread.stop()
            self.scanner_thread.wait()
            self.status_text.append("Scan stopped by user")
            self.start_button.setEnabled(True)
            self.stop_button.setEnabled(False)
            self.clear_button.setEnabled(True)

    def clear_results(self):
        """Clear the scan results."""
        self.results_table.setRowCount(0)
        self.status_text.clear()
        self.progress_bar.setValue(0)

    def update_progress(self, result: dict):
        """Update the progress with new scan results."""
        row = self.results_table.rowCount()
        self.results_table.insertRow(row)
        
        # Set severity color
        severity = result.get('severity', 'Unknown')
        color = {
            'High': QColor('#ff4444'),
            'Medium': QColor('#ffbb33'),
            'Low': QColor('#00C851')
        }.get(severity, QColor('#ffffff'))

        # Add items to the table
        self.results_table.setItem(row, 0, QTableWidgetItem(result.get('type', '')))
        severity_item = QTableWidgetItem(severity)
        severity_item.setBackground(color)
        self.results_table.setItem(row, 1, severity_item)
        self.results_table.setItem(row, 2, QTableWidgetItem(result.get('description', '')))
        self.results_table.setItem(row, 3, QTableWidgetItem(result.get('details', '')))

        # Update status
        self.status_text.append(f"Found: {result.get('type')} - {result.get('description')}")

    def scan_finished(self, results: list):
        """Handle scan completion."""
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.clear_button.setEnabled(True)
        self.progress_bar.setValue(100)
        self.status_text.append("\nScan completed successfully")

    def scan_error(self, error_message: str):
        """Handle scan errors."""
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.clear_button.setEnabled(True)
        self.status_text.append(f"Error: {error_message}")
        QMessageBox.critical(self, "Error", f"Scan failed: {error_message}") 