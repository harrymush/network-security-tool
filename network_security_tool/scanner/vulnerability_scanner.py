import socket
import subprocess
import nmap
import requests
from typing import Dict, List, Optional
import re
import ssl
from OpenSSL import SSL, crypto
from datetime import datetime
import sys

class VulnerabilityScanner:
    def __init__(self):
        self.nm = nmap.PortScanner()
        self.results = {}
        
    def scan_host(self, target: str, ports: str = "1-1024") -> Dict:
        """Scan a host for common vulnerabilities"""
        self.results = {
            "target": target,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "open_ports": [],
            "services": {},
            "vulnerabilities": [],
            "ssl_info": {},
            "http_headers": {},
            "error": None
        }
        
        try:
            # Validate target format
            if not re.match(r'^[\w\.-]+$', target):
                raise ValueError("Invalid target format. Please enter a valid hostname or IP address.")
                
            # Basic port scan with more aggressive options
            print(f"Starting scan on {target} for ports {ports}")  # Debug log
            try:
                # First try a quick scan
                self.nm.scan(target, ports, arguments='-sS -sV -T4')
                print(f"Quick scan completed")  # Debug log
                
                # If no ports found, try a more aggressive scan
                if not self.nm.all_hosts() or not any(self.nm[target].all_protocols()):
                    print("No ports found in quick scan, trying more aggressive scan...")  # Debug log
                    self.nm.scan(target, ports, arguments='-sS -sV -T4 -Pn -A')
                    print(f"Aggressive scan completed")  # Debug log
                    
            except Exception as e:
                print(f"Error during nmap scan: {str(e)}")  # Debug log
                raise ValueError(f"Nmap scan failed: {str(e)}")
            
            if not self.nm.all_hosts():
                print(f"No hosts found in scan results")  # Debug log
                raise ValueError(f"No hosts found for target {target}")
                
            if target not in self.nm.all_hosts():
                print(f"Target {target} not found in scan results")  # Debug log
                raise ValueError(f"Target {target} not found in scan results")
                
            host = self.nm[target]
            print(f"Found host: {host}")  # Debug log
            
            # Check if any protocols were found
            if not host.all_protocols():
                print("No open ports found")  # Debug log
                self.results["error"] = "No open ports found. The host might be blocking the scan or have no open ports."
                return self.results
                
            # Get open ports and services
            for proto in host.all_protocols():
                print(f"Processing protocol: {proto}")  # Debug log
                ports = host[proto].keys()
                for port in ports:
                    port_info = host[proto][port]
                    print(f"Found port {port}: {port_info}")  # Debug log
                    self.results["open_ports"].append({
                        "port": port,
                        "protocol": proto,
                        "state": port_info["state"],
                        "service": port_info["name"],
                        "version": port_info.get("version", "unknown")
                    })
                    
                    # Check for common vulnerabilities based on service
                    self._check_service_vulnerabilities(port, proto, port_info)
                    
                    # If HTTP/HTTPS, check web vulnerabilities
                    if port_info["name"] in ["http", "https"]:
                        self._check_web_vulnerabilities(target, port, port_info["name"])
                        
            return self.results
            
        except Exception as e:
            self.results["error"] = str(e)
            return self.results
            
    def _check_service_vulnerabilities(self, port: int, protocol: str, service_info: Dict):
        """Check for common vulnerabilities in services"""
        service = service_info["name"].lower()
        version = service_info.get("version", "").lower()
        
        # SSH vulnerabilities
        if service == "ssh":
            if "openssh" in version and any(v in version for v in ["7.1", "7.2", "7.3"]):
                self.results["vulnerabilities"].append({
                    "type": "SSH",
                    "severity": "High",
                    "description": "Potential OpenSSH vulnerabilities in versions 7.1-7.3",
                    "port": port
                })
                
        # FTP vulnerabilities
        elif service == "ftp":
            if "vsftpd" in version and "2.3.4" in version:
                self.results["vulnerabilities"].append({
                    "type": "FTP",
                    "severity": "Critical",
                    "description": "vsftpd 2.3.4 backdoor vulnerability",
                    "port": port
                })
                
        # SMB vulnerabilities
        elif service in ["smb", "microsoft-ds"]:
            self.results["vulnerabilities"].append({
                "type": "SMB",
                "severity": "Medium",
                "description": "SMB service exposed - potential EternalBlue vulnerability",
                "port": port
            })
            
    def _check_web_vulnerabilities(self, target: str, port: int, protocol: str):
        """Check for web-related vulnerabilities"""
        try:
            url = f"{protocol}://{target}:{port}"
            
            # Check SSL/TLS if HTTPS
            if protocol == "https":
                self._check_ssl_vulnerabilities(target, port)
                
            # Check HTTP headers
            response = requests.get(url, verify=False, timeout=5)
            self.results["http_headers"] = dict(response.headers)
            
            # Check for common web vulnerabilities
            if "Server" in response.headers:
                server = response.headers["Server"]
                if "Apache" in server and "2.2" in server:
                    self.results["vulnerabilities"].append({
                        "type": "Web",
                        "severity": "High",
                        "description": "Apache 2.2.x - potential vulnerabilities",
                        "port": port
                    })
                    
            if "X-Powered-By" in response.headers:
                if "PHP" in response.headers["X-Powered-By"]:
                    self.results["vulnerabilities"].append({
                        "type": "Web",
                        "severity": "Medium",
                        "description": "PHP version exposed in headers",
                        "port": port
                    })
                    
        except Exception as e:
            print(f"Error checking web vulnerabilities: {e}", file=sys.stderr)
            
    def _check_ssl_vulnerabilities(self, target: str, port: int):
        """Check for SSL/TLS vulnerabilities"""
        try:
            context = ssl.create_default_context()
            with socket.create_connection((target, port)) as sock:
                with context.wrap_socket(sock, server_hostname=target) as ssock:
                    cert = ssock.getpeercert()
                    cert_info = ssl.get_server_certificate((target, port))
                    x509 = crypto.load_certificate(crypto.FILETYPE_PEM, cert_info)
                    
                    # Check certificate expiration
                    not_after = datetime.strptime(x509.get_notAfter().decode('ascii'), '%Y%m%d%H%M%S%z')
                    if (not_after - datetime.now(not_after.tzinfo)).days < 30:
                        self.results["vulnerabilities"].append({
                            "type": "SSL",
                            "severity": "Medium",
                            "description": "SSL certificate expires soon",
                            "port": port
                        })
                        
                    # Check SSL/TLS version
                    if ssock.version() in ["SSLv2", "SSLv3", "TLSv1", "TLSv1.1"]:
                        self.results["vulnerabilities"].append({
                            "type": "SSL",
                            "severity": "High",
                            "description": f"Insecure SSL/TLS version: {ssock.version()}",
                            "port": port
                        })
                        
                    self.results["ssl_info"] = {
                        "version": ssock.version(),
                        "cipher": ssock.cipher(),
                        "issuer": dict(x509.get_issuer().get_components()),
                        "subject": dict(x509.get_subject().get_components()),
                        "expiration": not_after.isoformat()
                    }
                    
        except Exception as e:
            print(f"Error checking SSL vulnerabilities: {e}", file=sys.stderr)
            
    def get_results(self) -> Dict:
        """Get the scan results"""
        return self.results 